---
import { ArrowRight } from "@lucide/astro";
import Logo from "../assets/Logo.svg";
import LanguageToggle from "./LanguageToggle.astro";

const { t } = Astro.props;
---

<header
  id="site-header"
  class="dark-header w-full sticky top-0 z-50 backdrop-blur-md transition-colors duration-300"
>
  <div class="section-wrapper">
    <div class="flex w-full py-4 px-1 max-h-16 justify-between items-center">
      <a href="/" aria-label="Home" class="flex items-center">
        <div class="logo-shimmer group">
          <Logo class="h-7 lg:h-8 xl:h-9 w-auto" />
        </div>
      </a>
      <nav class="hidden lg:flex">
        <ul class="lg:flex list-none w-full justify-center text-sm xl:text-base gap-6">
          {
            t.nav.map(
              (c: { href: string | URL | null | undefined; name: unknown }) => (
                <li>
                  <a href={c.href}>{c.name}</a>
                </li>
              )
            )
          }
        </ul>
      </nav>
      <div class="flex items-center gap-4">
        <span class="hidden md:block"> <LanguageToggle /> </span>
        <a
          role="button"
          href="#Services"
          class="group flex gap-1 px-2 lg:px-3 py-1 lg:py-2 items-center rounded-xl bg-white hover:bg-offwhite active:bg-white-blue border border-gray-blue/50 whitespace-nowrap"
        >
          <span class="hidden md:block font-medium text-black">{t.cta.desktop}</span>
          <span class="md:hidden font-medium text-black">{t.cta.mobile}</span>
          <ArrowRight
            class="h-4 w-4 stroke-[2.5] lg:stroke-3 text-black transition-transform duration-300 group-hover:translate-x-1.5"
          />
        </a>
      </div>
    </div>
  </div>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("site-header");
    const sections = document.querySelectorAll(".light-bg, .dark-bg");

    if (header && sections.length) {
      const setMode = (isLight) => {
        header.classList.remove("light-header", "dark-header");
        header.classList.add(isLight ? "light-header" : "dark-header");
      };

      const mid = window.innerHeight / 2;
      const initial = [...sections].find((el) => {
        const r = el.getBoundingClientRect();
        return r.top <= mid && r.bottom >= mid;
      });
      if (initial) setMode(initial.classList.contains("light-bg"));

      const vw = window.innerWidth;
      let threshold;

      if (vw < 1024) {
        threshold = 0.2;
      } else if (vw < 1640) {
        threshold = 0.45;
      } else {
        threshold = 0.6;
      }

      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              setMode(entry.target.classList.contains("light-bg"));
            }
          });
        },
        {
          threshold,
          rootMargin: `-${header.offsetHeight}px 0px 0px 0px`,
        }
      );

      sections.forEach((s) => observer.observe(s));
    }
  });
</script>
