---
import { ArrowRight } from "@lucide/astro";
import Logo from "../assets/Logo.svg";
---

<header
  id="site-header"
  class="dark-header w-full sticky top-0 z-50 backdrop-blur-md transition-colors duration-300"
>
  <div class="section-wrapper">
    <div class="flex w-full py-4 px-1 max-h-16 justify-between items-center">
      <a href="/" aria-label="Home" class="flex items-center">
        <Logo class="h-9 w-auto" />
      </a>
      <nav class="hidden lg:flex w-full">
        <ul class="lg:flex list-none w-full justify-center gap-6">
          <li>
            <a href="#WhatIDo">what I do</a>
          </li>
          <li>
            <a href="#HowIWork">how I work</a>
          </li>
          <li>
            <a href="#Manifest">manifest</a>
          </li>
          <li>
            <a href="#Services">services</a>
          </li>
          <li>
            <a href="#Testimonies">testimonies</a>
          </li>
          <li>
            <a href="#Contact">contact</a>
          </li>
        </ul>
      </nav>
      <a
        role="button"
        href="#Services"
        class="flex gap-1 px-3 py-2 items-center rounded-xl bg-white hover:bg-offwhite active:bg-white-blue border border-gray-blue/50 whitespace-nowrap"
      >
        <span class="font-medium text-black">Start a Project</span>
        <ArrowRight class="h-4 w-4 stroke-[2.5] text-black" />
      </a>
    </div>
  </div>
</header>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const header = document.getElementById("site-header");
    const sections = document.querySelectorAll(".light-bg, .dark-bg");

    console.log("Found sections:", sections.length);

    if (header && sections.length) {
      const setMode = (isLight) => {
        header.classList.remove("light-header", "dark-header");
        header.classList.add(isLight ? "light-header" : "dark-header");
      };

      // Initial mode
      const mid = window.innerHeight / 2;
      const initial = [...sections].find((el) => {
        const r = el.getBoundingClientRect();
        return r.top <= mid && r.bottom >= mid;
      });
      if (initial) setMode(initial.classList.contains("light-bg"));

      // Observe sections
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              setMode(entry.target.classList.contains("light-bg"));
            }
          });
        },
        {
          threshold: [0.2, 0.5],
          rootMargin: `-${header.offsetHeight}px 0px 0px 0px`,
        }
      );

      sections.forEach((s) => observer.observe(s));
    }
  });
</script>
