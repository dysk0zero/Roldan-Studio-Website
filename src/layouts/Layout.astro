---
import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import "../styles/global.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Roldan Studio</title>
    <meta
      name="description"
      content="Web Design & Development Freelancer based in Berlin."
    />
    <meta name="color-scheme" content="dark" />
    <link rel="canonical" href="https://jbroldan.dev" />
    <link
      rel="preload"
      href="/fonts/montserrat-v31-latin-500.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/montserrat-v31-latin-600.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/montserrat-v31-latin-700.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/montserrat-v31-latin-regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
  </head>
  <body class="text-white">
    <Header />
    <main class="flex flex-col items-center">
      <slot />
    </main>
    <Footer />
    <script type="module">
      import { animate } from "https://cdn.jsdelivr.net/npm/@motionone/dom/+esm";

      const DEFAULT_DURATION = 0.9;
      const DEFAULT_EASING = "ease-out";
      const OFFSET = 24;

      document.addEventListener("DOMContentLoaded", () => {
        const elements = document.querySelectorAll(
          "[data-animate], [data-animate-left], [data-animate-right]"
        );

        const getTransform = (el) => {
          if (el.hasAttribute("data-animate-left"))
            return [`translateX(-${OFFSET}px)`, "translateX(0px)"];
          if (el.hasAttribute("data-animate-right"))
            return [`translateX(${OFFSET}px)`, "translateX(0px)"];
          return [`translateY(${OFFSET}px)`, "translateY(0px)"];
        };

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (!entry.isIntersecting) return;

              const el = entry.target;
              observer.unobserve(el);

              animate(
                el,
                {
                  opacity: [0, 1],
                  transform: getTransform(el),
                },
                {
                  duration: parseFloat(el.dataset.duration) || DEFAULT_DURATION,
                  delay: parseFloat(el.dataset.delay) || 0,
                  easing: DEFAULT_EASING,
                }
              );
            });
          },
          {
            threshold: 0.4,
          }
        );

        elements.forEach((el) => observer.observe(el));
      });
    </script>
  </body>
</html>
